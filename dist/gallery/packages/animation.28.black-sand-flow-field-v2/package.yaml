version: v1
metadata:
  name: Black Sand Flow Field v2
  description: ""
  author: Jack Rugile
  source: https://codepen.io/jackrugile/pen/wvPvjLX
helpers:
  insert_baseurl: true
template: |
  <!doctype html>
  <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <title>Black Sand Flow Field v2</title>
      <style>
        html,
        body,
        div,
        span,
        applet,
        object,
        iframe,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        p,
        blockquote,
        pre,
        a,
        abbr,
        acronym,
        address,
        big,
        cite,
        code,
        del,
        dfn,
        em,
        img,
        ins,
        kbd,
        q,
        s,
        samp,
        small,
        strike,
        strong,
        sub,
        sup,
        tt,
        var,
        b,
        u,
        i,
        center,
        dl,
        dt,
        dd,
        ol,
        ul,
        li,
        fieldset,
        form,
        label,
        legend,
        table,
        caption,
        tbody,
        tfoot,
        thead,
        tr,
        th,
        td,
        article,
        aside,
        canvas,
        details,
        embed,
        figure,
        figcaption,
        footer,
        header,
        hgroup,
        menu,
        nav,
        output,
        ruby,
        section,
        summary,
        time,
        mark,
        audio,
        video {
          margin: 0;
          padding: 0;
          border: 0;
          font-size: 100%;
          font: inherit;
          vertical-align: baseline;
        }
        article,
        aside,
        details,
        figcaption,
        figure,
        footer,
        header,
        hgroup,
        menu,
        nav,
        section {
          display: block;
        }
        body {
          line-height: 1;
        }
        ol,
        ul {
          list-style: none;
        }
        blockquote,
        q {
          quotes: none;
        }
        blockquote:before,
        blockquote:after,
        q:before,
        q:after {
          content: "";
          content: none;
        }
        table {
          border-collapse: collapse;
          border-spacing: 0;
        }
        body {
          background: #000;
          overflow: hidden;
        }

        canvas {
          bottom: 0;
          box-shadow: 0 0 0 1px #333;
          left: 0;
          margin: auto;
          position: absolute;
          right: 0;
          top: 0;
        }
      </style>
      <script src="./simplex-noise.min.js"></script>
      <script src="./three.min.js"></script>
    </head>
    <body>
      <script>
        const $ = {};

        $.rand = function (min, max) {
          return Math.random() * (max - min) + min;
        };

        $.point = function (parent, index) {
          this.parent = parent;
          this.index = index;
          this.reset();
        };

        $.point.prototype = THREE.Vector3;

        $.point.prototype.reset = function () {
          this.noiseDirection = 0;
          this.noiseMagnitude = 0;
          this.speed = $.rand(4, 6);
          this.x = $.rand(-$.w / 2, $.w / 2);
          this.y = $.rand(-$.h / 2, $.h / 2);
          this.z = 0;
          this.cx = 0;
          this.cy = 0;
          this.vx = $.rand(-1, 1);
          this.vy = $.rand(-1, 1);

          // this.x = 0;
          // this.y = 0;

          this.speed = $.rand(4, 6);
          // this.vx = 0;
          // this.vy = 0;
        };

        $.point.prototype.setColor = function (color) {
          $.points.geometry.colors[this.index] = new THREE.Color().setHSL(
            0,
            0,
            0.2,
          );
        };

        $.point.prototype.step = function () {
          this.x += this.vx;
          this.y += this.vy;
          this.cx = Math.max(
            0,
            Math.min($.cols - 1, Math.floor((this.x + $.w / 2) / $.unitW)),
          );
          this.cy = Math.max(
            0,
            Math.min($.rows - 1, Math.floor((this.y + $.h / 2) / $.unitH)),
          );

          let _noise1 = $.noiseDirectionLookup[this.cx * $.cols + this.cy];
          _noise1 = Math.min(1, _noise1);
          _noise1 = Math.max(-1, _noise1);
          this.noiseDirection = (_noise1 + 1) * Math.PI * 2;

          let _noise2 = $.noiseMagnitudeLookup[this.cx * $.cols + this.cy];
          _noise2 = Math.min(1, _noise2);
          _noise2 = Math.max(-1, _noise2);
          this.noiseMagnitude = 0.3 + (_noise2 + 1) / 2;

          this.vxTarget =
            Math.cos(this.noiseDirection + $.rand(-0.05, 0.05)) *
            this.noiseMagnitude *
            this.speed;
          this.vyTarget =
            Math.sin(this.noiseDirection + $.rand(-0.05, 0.05)) *
            this.noiseMagnitude *
            this.speed;

          // this.vx += ( this.vxTarget - this.vx ) * 0.05;
          // this.vy += ( this.vyTarget - this.vy ) * 0.05;

          this.vx += (this.vxTarget - this.vx) * 0.05;
          this.vy += (this.vyTarget - this.vy) * 0.05;

          if (
            this.x > $.w / 2 ||
            this.x < -$.w / 2 ||
            this.y > $.h / 2 ||
            this.y < -$.h / 2
          ) {
            this.reset();
          }
        };

        $.init = function () {
          $.w = 400;
          $.h = 400;
          $.w = window.innerWidth;
          $.h = window.innerHeight;
          ($.cols = 128), ($.rows = 128), ($.unitW = $.w / $.cols);
          $.unitH = $.h / $.rows;
          ($.offInc = 0.04),
            ($.tickMult = 0.002),
            ($.tick = 0),
            ($.simplex = new SimplexNoise());
          $.scene = new THREE.Scene();
          $.scene.background = new THREE.Color(0x000000);
          $.noiseDirectionLookup = [];
          $.noiseMagnitudeLookup = [];

          $.camera = new THREE.OrthographicCamera(
            -$.w / 2,
            $.w / 2,
            $.h / 2,
            -$.h / 2,
            1,
            1000,
          );
          $.camera.position.z = $.w / 2;

          $.renderer = new THREE.WebGLRenderer({
            antialias: true,
          });
          $.renderer.setSize($.w, $.h);
          $.renderer.setPixelRatio(
            window.devicePixelRatio ? window.devicePixelRatio : 1,
          );
          document.body.appendChild($.renderer.domElement);

          $.count = 100000;
          $.geometry = new THREE.Geometry();
          for (let i = 0; i < $.count; i++) {
            $.geometry.vertices.push(new $.point($.geometry, i));
          }
          $.material = new THREE.PointsMaterial({
            blending: THREE.AdditiveBlending,
            size: window.devicePixelRatio,
            transparent: true,
            //color: 0xff3333,
            opacity: 0.2,
            color: new THREE.Color().setHSL(0, 1, 0.6),
            //vertexColors: THREE.VertexColors
          });
          $.points = new THREE.Points($.geometry, $.material);
          $.scene.add($.points);

          $.points.geometry.vertices.forEach(function (point) {
            point.setColor();
          });

          $.loop();
        };

        $.step = function () {
          for (let i = 0; i < $.cols * $.rows; i++) {
            let _cx = i % $.cols;
            let _cy = Math.floor(i / $.cols);
            $.noiseDirectionLookup[i] = $.simplex.noise3D(
              $.offInc * _cx,
              $.offInc * _cy,
              $.tick * $.tickMult,
            );
            $.noiseMagnitudeLookup[i] = $.simplex.noise3D(
              $.offInc * _cx,
              $.offInc * _cy,
              $.tick * $.tickMult + 1000,
            );
          }

          $.points.geometry.vertices.forEach(function (point) {
            point.step();
          });

          $.points.geometry.verticesNeedUpdate = true;

          $.tick++;
        };

        $.loop = function () {
          requestAnimationFrame($.loop);
          $.step();
          $.renderer.render($.scene, $.camera);
        };

        $.init();
      </script>
    </body>
  </html>
