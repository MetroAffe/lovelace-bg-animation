version: v1
metadata:
    name: GPU Particles 
    description: First Time GPGPU Particles
    author: Tim Severien
    source: https://codepen.io/timseverien/pen/rWdJZY

template: |

        <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/87/three.min.js"></script>
        <body> 
        </body>

        <script id="shader-noise-perlin" type="x-shader">

        // GLSL textureless classic 3D noise "cnoise",
        // with an RSL-style periodic variant "pnoise".
        // Author:  Stefan Gustavson (stefan.gustavson@liu.se)
        // Version: 2011-10-11
        //
        // Many thanks to Ian McEwan of Ashima Arts for the
        // ideas for permutation and gradient selection.
        //
        // Copyright (c) 2011 Stefan Gustavson. All rights reserved.
        // Distributed under the MIT license. See LICENSE file.
        // https://github.com/stegu/webgl-noise
        //

        vec3 mod289(vec3 x)
        {
        return x - floor(x * (1.0 / 289.0)) * 289.0;
        }

        vec4 mod289(vec4 x)
        {
        return x - floor(x * (1.0 / 289.0)) * 289.0;
        }

        vec4 permute(vec4 x)
        {
        return mod289(((x*34.0)+1.0)*x);
        }

        vec4 taylorInvSqrt(vec4 r)
        {
        return 1.79284291400159 - 0.85373472095314 * r;
        }

        vec3 fade(vec3 t) {
        return t*t*t*(t*(t*6.0-15.0)+10.0);
        }

        // Classic Perlin noise
        float cnoise(vec3 P)
        {
        vec3 Pi0 = floor(P); // Integer part for indexing
        vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
        Pi0 = mod289(Pi0);
        Pi1 = mod289(Pi1);
        vec3 Pf0 = fract(P); // Fractional part for interpolation
        vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
        vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
        vec4 iy = vec4(Pi0.yy, Pi1.yy);
        vec4 iz0 = Pi0.zzzz;
        vec4 iz1 = Pi1.zzzz;

        vec4 ixy = permute(permute(ix) + iy);
        vec4 ixy0 = permute(ixy + iz0);
        vec4 ixy1 = permute(ixy + iz1);

        vec4 gx0 = ixy0 * (1.0 / 7.0);
        vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
        gx0 = fract(gx0);
        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
        vec4 sz0 = step(gz0, vec4(0.0));
        gx0 -= sz0 * (step(0.0, gx0) - 0.5);
        gy0 -= sz0 * (step(0.0, gy0) - 0.5);

        vec4 gx1 = ixy1 * (1.0 / 7.0);
        vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
        gx1 = fract(gx1);
        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
        vec4 sz1 = step(gz1, vec4(0.0));
        gx1 -= sz1 * (step(0.0, gx1) - 0.5);
        gy1 -= sz1 * (step(0.0, gy1) - 0.5);

        vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
        vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
        vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
        vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
        vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
        vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
        vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
        vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

        vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
        g000 *= norm0.x;
        g010 *= norm0.y;
        g100 *= norm0.z;
        g110 *= norm0.w;
        vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
        g001 *= norm1.x;
        g011 *= norm1.y;
        g101 *= norm1.z;
        g111 *= norm1.w;

        float n000 = dot(g000, Pf0);
        float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
        float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
        float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
        float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
        float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
        float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
        float n111 = dot(g111, Pf1);

        vec3 fade_xyz = fade(Pf0);
        vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
        vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
        float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
        return 2.2 * n_xyz;
        }
        </script>

        <script id="shader-simulation-vertex" type="x-shader/x-vertex">
        varying vec2 vUv;

        void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
        </script>

        <script id="shader-simulation-fragment" type="x-shader/x-fragment">
        #include <common>

        uniform sampler2D tData;
        uniform vec2 resolution;
        uniform float velocityMax;
        uniform float time;
        uniform float delta;

        varying vec2 vUv;

        void main() {
        vec4 particle = texture2D(tData, vUv);
        vec2 pPosition = particle.xy * resolution;
        vec2 pVelocity = particle.zw;
            
            vec3 seed = vec3(pPosition / resolution * 8.0, time / 5.0);
            float forceAngleOffset = sin(time / 16.0) * .25;
        float forceAngle = (cnoise(seed) + forceAngleOffset) * PI;
        vec2 force = vec2(cos(forceAngle), sin(forceAngle)) * .75;

        pVelocity += force;

        if (length(pVelocity) > velocityMax) {
            pVelocity = normalize(pVelocity) * velocityMax;
        }

        pPosition += pVelocity * delta;
        pPosition = mod(pPosition + resolution * .5, resolution) - resolution * .5;

        gl_FragColor = vec4(pPosition / resolution, pVelocity);
        }
        </script>

        <script id="shader-particles-vertex" type="x-shader/x-vertex">
        uniform sampler2D tData;
        uniform vec2 resolution;

        varying vec2 vUv;

        void main() {
        vUv = uv;

        vec2 pPosition = texture2D(tData, vUv).rg * resolution;

        gl_PointSize = 1.0;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(pPosition, 1.0, 1.0);
        }
        </script>

        <script id="shader-particles-fragment" type="x-shader/x-fragment">
        uniform sampler2D tData;
        uniform float velocityMax;
        uniform vec3 colorBase;
        uniform vec3 colorIntense;

        varying vec2 vUv;

        void main() {
        vec4 particle = texture2D(tData, vUv);
        vec2 pVelocity = particle.zw;
        float intensity = pow(length(pVelocity) / velocityMax, 5.0);

        vec3 color = mix(colorBase, colorIntense, intensity);

        gl_FragColor = vec4(color, 1.0);
        }
        </script>

        <script id="shader-copy-vertex" type="x-shader/x-vertex">
        uniform sampler2D tData;
        varying vec2 vUv;

        void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
        </script>

        <script id="shader-copy-fragment" type="x-shader/x-fragment">
        uniform sampler2D tData;
        varying vec2 vUv;

        void main() {
        gl_FragColor = texture2D(tData, vUv);
        }
        </script>

        <style>
        body, html {
        margin: 0;
        padding: 0;
        }

        body {
        background: #000;
        overflow: hidden;
        }
        canvas {
            display: block;
        }
        </style>

        <script>

            // Based on:
            // http://mrdoob.com/lab/javascript/webgl/particles/particles_zz85.html

            function getParticleData(particleCount, textureSize) {
            const data = new Float32Array(particleCount * 4);
            const getRandomValue = () => Math.random() - .5;

            for (let i = 0; i < data.length; i += 4) {
                const position = new THREE.Vector2(
                getRandomValue(),
                getRandomValue());


                data[i + 0] = position.x;
                data[i + 1] = position.y;
            }

            const texture = new THREE.DataTexture(
            data, textureSize, textureSize,
            THREE.RGBAFormat,
            THREE.FloatType,
            THREE.Texture.DEFAULT_MAPPING,
            THREE.RepeatWrapping,
            THREE.RepeatWrapping,
            THREE.NearestFilter,
            THREE.NearestFilter);


            texture.needsUpdate = true;

            return texture;
            }

            function getPlane(size) {
            const geometry = new THREE.PlaneGeometry(size.x, size.y, 1, 1);
            const material = new THREE.MeshBasicMaterial();

            return new THREE.Mesh(geometry, material);
            }

            const CAMERA_DEPTH = 1024;
            const PARTICLE_COUNT = Math.pow(2, 20);
            const PARTICLE_TEXTURE_SIZE = Math.sqrt(PARTICLE_COUNT);

            if (!THREE.Math.isPowerOfTwo(PARTICLE_TEXTURE_SIZE)) {
            throw new Error('Particle count should be a power of two.');
            }

            const PARTICLE_TEXTURE_RESOLUTION = new THREE.Vector2(
            window.innerWidth,
            window.innerHeight);

            const PARTICLE_TEXTURE_RESOLUTION_HALF = PARTICLE_TEXTURE_RESOLUTION.clone().multiplyScalar(.5);

            const SHADER_UNIFORMS_GLOBAL = {
            resolution: {
                value: PARTICLE_TEXTURE_RESOLUTION },

            velocityMax: {
                value: Math.min(
                PARTICLE_TEXTURE_RESOLUTION.x,
                PARTICLE_TEXTURE_RESOLUTION.y) *
                .125 },

            colorBase: {
                value: new THREE.Color('hsl(245, 100%, 30%)') },

            colorIntense: {
                value: new THREE.Color('hsl(15, 100%, 30%)') },

            time: {
                value: 0 },

            delta: {
                value: 0 } };



            const camera = new THREE.OrthographicCamera(
            -PARTICLE_TEXTURE_RESOLUTION_HALF.x,
            PARTICLE_TEXTURE_RESOLUTION_HALF.x,
            PARTICLE_TEXTURE_RESOLUTION_HALF.y,
            -PARTICLE_TEXTURE_RESOLUTION_HALF.y,
            1,
            CAMERA_DEPTH);

            camera.position.z = CAMERA_DEPTH / 2;

            const renderer = new THREE.WebGLRenderer();
            renderer.setSize(PARTICLE_TEXTURE_RESOLUTION.x, PARTICLE_TEXTURE_RESOLUTION.y);

            /**
            * Prepare tools to render to texture
            */

            var renderTarget = new THREE.WebGLRenderTarget(
            PARTICLE_TEXTURE_SIZE,
            PARTICLE_TEXTURE_SIZE,
            {
            wrapS: THREE.ClampToEdgeWrapping,
            wrapT: THREE.ClampToEdgeWrapping,
            minFilter: THREE.NearestFilter,
            magFilter: THREE.NearestFilter,
            format: THREE.RGBAFormat,
            type: THREE.FloatType,
            stencilBuffer: false });



            const textureBuffers = new function () {
            this.in = renderTarget;
            this.out = renderTarget.clone();

            this.swap = () => {
                [this.in, this.out] = [this.out, this.in];
            };
            }();

            const rttScene = new THREE.Scene();
            const rttPlane = getPlane(PARTICLE_TEXTURE_RESOLUTION);
            rttScene.add(rttPlane);

            const renderToTexture = (shader, inTexture, outTexture) => {
            rttPlane.material = shader;
            rttPlane.material.uniforms.tData.value = inTexture;
            renderer.render(rttScene, camera, outTexture, true);
            };

            /**
            * Create and mutate base data
            */

            const SHADER_PART_NOISE = document.getElementById('shader-noise-perlin').textContent;

            const baseData = getParticleData(
            PARTICLE_COUNT,
            PARTICLE_TEXTURE_SIZE);

            const simulationShader = new THREE.ShaderMaterial({
            uniforms: Object.assign({}, SHADER_UNIFORMS_GLOBAL, {
                tData: { value: baseData } }),

            vertexShader: document.getElementById('shader-simulation-vertex').textContent,
            fragmentShader: SHADER_PART_NOISE + document.getElementById('shader-simulation-fragment').textContent });


            rttPlane.material = simulationShader;
            renderer.render(rttScene, camera, textureBuffers.out, true);

            /**
            * Mutate and render GPU texture
            */

            const vertices = new Float32Array(PARTICLE_COUNT * 3);


            for (let i = 0; i < vertices.length; i++) {
            vertices[i] = Math.random();
            }

            const uvs = new Float32Array(PARTICLE_COUNT * 2);

            for (let i = 0; i < uvs.length; i += 2) {
            const index = i / 2;
            uvs[i + 0] = index % PARTICLE_TEXTURE_SIZE / PARTICLE_TEXTURE_SIZE;
            uvs[i + 1] = Math.floor(index / PARTICLE_TEXTURE_SIZE) / PARTICLE_TEXTURE_SIZE;
            }

            const particleGeometry = new THREE.BufferGeometry();
            particleGeometry.addAttribute(
            'position',
            new THREE.BufferAttribute(vertices, 3));

            particleGeometry.addAttribute('uv', new THREE.BufferAttribute(uvs, 2));

            const particles = new THREE.Points(
            particleGeometry,
            new THREE.ShaderMaterial({
            uniforms: Object.assign({}, SHADER_UNIFORMS_GLOBAL, {
                tData: { value: textureBuffers.in } }),


            vertexShader: document.getElementById('shader-particles-vertex').textContent,
            fragmentShader: document.getElementById('shader-particles-fragment').textContent,
            depthTest: false,
            transparent: true,
            blending: THREE.AdditiveBlending }));



            const scene = new THREE.Scene();
            scene.add(particles);

            const start = Date.now() / 1000;
            let previous = start;

            const render = () => {
            requestAnimationFrame(render);

            textureBuffers.swap();

            const now = Date.now() / 1000;
            const delta = now - previous;
            const elapsed = now - start;

            simulationShader.uniforms.time.value = elapsed;
            simulationShader.uniforms.delta.value = delta;

            simulationShader.uniforms.tData.value = textureBuffers.in.texture;
            renderer.render(rttScene, camera, textureBuffers.out, true);

            particles.material.uniforms.time.value = elapsed;
            particles.material.uniforms.delta.value = delta;

            particles.material.uniforms.tData.value = textureBuffers.in.texture;
            renderer.render(scene, camera);

            previous = now;
            };

            render();
            document.body.appendChild(renderer.domElement);
        </script>