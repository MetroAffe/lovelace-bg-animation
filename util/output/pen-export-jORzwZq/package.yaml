version: v1
metadata:
  name: ""
  description: ""
  author: Unknown
  source: https://codepen.io/shubniggurath/pen/jORzwZq
parameters:
  - id: color
    default: "#000000"
helpers:
  insert_baseurl: true
template: >
  <!DOCTYPE html>

  <html lang="en" >

  <head>
    <meta charset="UTF-8">
    <title>CodePen - A Pen by Liam Egan</title>
    <style>body {
    background: #333;
    color: #fff;
    font-family: sans-serif;
  }

  body,

  html {
    margin: 0;
    overflow: hidden;
    padding: 0;
  }

  canvas { width:100%; height: 100%; }</style>


  </head>

  <body>


  <script type="text/fragment" id="fragShader">#version 300 es

  precision highp float;


  uniform vec2 u_resolution;

  uniform float u_time;

  uniform vec2 u_mouse;

  uniform sampler2D s_noise;


  uniform sampler2D b_noise;


  in vec2 v_uv;


  out vec4 colour;
    
  //Skewing and "unskewing" constants as decribed here:

  //https://en.wikipedia.org/wiki/Simplex_noise

  //N = dimensions, in this case: 2

  //Skewing factor for triangular grid

  #define F 0.366025403784 //(sqrt(N+1.0)-1.0)/N

  //Reverse skewing factor for square grid

  #define G 0.211324865405 //(1.0 - 1.0/sqrt(N+1.0))/N

  #define INTERPOLANT 0


  vec2 getScreenSpace() {
    vec2 uv = (gl_FragCoord.xy - 0.5 * u_resolution.xy) / min(u_resolution.y, u_resolution.x);

    return uv;
  }
    vec3 hash( vec3 p ) // replace this by something better
  {
  	p = vec3( dot(p,vec3(127.1,311.7, 74.7)),
  			  dot(p,vec3(269.5,183.3,246.1)),
  			  dot(p,vec3(113.5,271.9,124.6)));

  	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
  }


  float noise( in vec3 p )

  {
      vec3 i = floor( p );
      vec3 f = fract( p );

      #if INTERPOLANT==1
      // quintic interpolant
      vec3 u = f*f*f*(f*(f*6.0-15.0)+10.0);
      #else
      // cubic interpolant
      vec3 u = f*f*(3.0-2.0*f);
      #endif    

      return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), 
                            dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),
                       mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), 
                            dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),
                  mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), 
                            dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),
                       mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), 
                            dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );
  }

  float pt(vec3 p) {
    return noise(p);
  }
    float fbm(vec3 p)
  {
      float result = 0.;
      float a = .5;
      for (float i = 0.; i < 4.; ++i)
      {
          p += result*.1;
          p.z += u_time;
          result += noise(p/a)*a;
          a /= 1.7;
      }
      return result;
  }

  void main() {
    vec2 uv = getScreenSpace();
    
    uv *= 1.;
    vec3 e = vec3(200./u_resolution.xy,u_time*2.);
    
    vec3 ray = normalize(vec3(uv,.12));
    
    #define T(u) fbm(ray+u)
    vec3 normal = normalize(T(0.)-vec3(T(e.xzz),T(e.zyz),1.));
    vec3 color = 0.5 + 0.5 * cos(vec3(2.+cos(u_time),1,3.+sin(u_time))*5.*(1.+normal.z*.3) - normal.x+.5);
    color *= smoothstep(-1.,1.,-normal.z);
    // color = vec3(smoothstep(0.5,1.,-normal.z));

    colour = vec4(color,1);
  }

  </script>

    <script type="module" src="./script.js"></script><script>console.clear();

  import { FragmentShader, Texture, Uniform } from
  'https://cdn.skypack.dev/wtc-gl@1.0.0-beta.43';


  const shaderF = document.querySelector('#fragShader').innerText;


  const vertex = `#version 300 es

  in vec3 position;

  in vec2 uv;

  out vec2 v_uv;

  void main() {

  gl_Position = vec4(position, 1.0);

  v_uv = uv;

  }

  `


  // Create the fragment shader wrapper

  const FSWrapper = new FragmentShader({
    fragment: shaderF,
    vertex
  });


  const { gl, uniforms } = FSWrapper;


  // Create the texture

  const texture = new Texture(gl, {
    wrapS: gl.REPEAT,
    wrapT: gl.REPEAT
  });

  // Load the image into the uniform

  const img = new Image();

  img.crossOrigin = "anonymous";

  img.src = "https://assets.codepen.io/982762/noise.png";

  img.onload = () => (texture.image = img);


  uniforms.s_noise = new Uniform({
    name: "noise",
    value: texture,
    kind: "texture"
  });</script>


  </body>

  </html>
